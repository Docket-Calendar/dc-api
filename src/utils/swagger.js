const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const { apiPrefix, environment } = require('../config/server');

// Determine server URL based on environment
const serverUrl = environment === 'production' 
  ? process.env.WEBSITE_HOSTNAME 
    ? `https://${process.env.WEBSITE_HOSTNAME}` 
    : 'https://docketcalendar-api-dev.azurewebsites.net'
  : '/';

// Swagger definition
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'DocketCalendar API - Simplified',
      version: '2.0.0',
      description: `Streamlined legal case management API focused on Cases, Triggers, and Events

## Getting Started

### 🔐 Authentication
This API uses JWT tokens for authentication. To access protected endpoints:

1. **Get your API token** from the DocketCalendar API page
2. **Using the token in Swagger**:
   - Click the "Authorize" 🔒 button at the top of this page
   - Enter your token (without "Bearer") in the Value field
   - Click "Authorize" and close the modal
   - Your requests will now include the authorization header
3. **Test your token** using the \`/auth/validate-token\` endpoint

### 📋 Quick Overview
This simplified API v2.0.0 focuses exclusively on three core entities:
- **Cases** - Legal matters and cases
- **Triggers** - Important deadlines and court dates  
- **Events** - Tasks and appointments generated from triggers

### 🚀 Start Here
1. Try the **GET /api/v1/cases** endpoint to see your cases
2. Pick a case ID and use **GET /api/v1/cases/{id}/triggers** to see related triggers
3. Check the "Common Implementation Patterns" section below for real-world examples

---

## Common Implementation Patterns & Workflows

### 🎯 Use Case 1: "Show me every trigger that belongs to a case"

\`\`\`javascript
const caseId = 123;
const response = await fetch(\`/api/v1/cases/\${caseId}/triggers\`, {
  headers: { 'Authorization': 'Bearer YOUR_TOKEN' }
});
const data = await response.json();

console.log(\`Found \${data.count} triggers for case \${caseId}\`);
data.data.forEach(trigger => {
  console.log(\`- \${trigger.trigger_name} on \${trigger.trigger_date}\`);
});
\`\`\`

### 🎯 Use Case 2: "Show me all cases assigned to a specific user"

\`\`\`javascript
const userEmail = "john.doe@lawfirm.com";

// Get all cases
const casesResponse = await fetch('/api/v1/cases', {
  headers: { 'Authorization': 'Bearer YOUR_TOKEN' }
});
const casesData = await casesResponse.json();

// Filter cases where the user is assigned
const userCases = casesData.data.filter(caseItem => 
  caseItem.assignees.some(assignee => assignee.assignee === userEmail)
);

console.log(\`User \${userEmail} is assigned to \${userCases.length} cases\`);
userCases.forEach(caseItem => {
  console.log(\`- \${caseItem.case_name} (\${caseItem.jurisdiction})\`);
});
\`\`\`

### 🎯 Use Case 3: "Find all events generated by a specific trigger"

\`\`\`javascript
const triggerId = 45678;
const response = await fetch(\`/api/v1/triggers/\${triggerId}/events\`, {
  headers: { 'Authorization': 'Bearer YOUR_TOKEN' }
});
const data = await response.json();

console.log(\`Found \${data.count} events from trigger \${triggerId}\`);
data.data.forEach(event => {
  console.log(\`- \${event.event_name} on \${event.date} at \${event.time}\`);
});
\`\`\`

### 🎯 Use Case 4: "Get complete case timeline with triggers and events"

\`\`\`javascript
async function getCaseTimeline(caseId) {
  // Get case details and related triggers in parallel
  const [caseResponse, triggersResponse] = await Promise.all([
    fetch(\`/api/v1/cases/\${caseId}\`, { headers: authHeaders }),
    fetch(\`/api/v1/cases/\${caseId}/triggers\`, { headers: authHeaders })
  ]);
  
  const [caseData, triggersData] = await Promise.all([
    caseResponse.json(),
    triggersResponse.json()
  ]);
  
  // Get events for each trigger
  const eventPromises = triggersData.data.map(trigger =>
    fetch(\`/api/v1/triggers/\${trigger.id}/events\`, { headers: authHeaders })
      .then(res => res.json())
  );
  
  const eventResponses = await Promise.all(eventPromises);
  const allEvents = eventResponses.flatMap(response => response.data);
  
  // Create timeline
  const timeline = [
    ...triggersData.data.map(t => ({ 
      type: 'trigger', 
      date: t.trigger_date, 
      time: t.trigger_time, 
      name: t.trigger_name,
      data: t 
    })),
    ...allEvents.map(e => ({ 
      type: 'event', 
      date: e.date, 
      time: e.time, 
      name: e.event_name,
      data: e 
    }))
  ].sort((a, b) => new Date(a.date) - new Date(b.date));
  
  return {
    case: caseData.data,
    triggers: triggersData.data,
    events: allEvents,
    timeline
  };
}

// Usage
const caseTimeline = await getCaseTimeline(123);
console.log(\`Case: \${caseTimeline.case.case_name}\`);
console.log(\`Triggers: \${caseTimeline.triggers.length}\`);
console.log(\`Events: \${caseTimeline.events.length}\`);
\`\`\`

### 🎯 Use Case 5: "Upcoming deadlines dashboard"

\`\`\`javascript
async function getUpcomingDeadlines(days = 30) {
  const [triggersResponse, eventsResponse] = await Promise.all([
    fetch('/api/v1/triggers', { headers: authHeaders }),
    fetch('/api/v1/events', { headers: authHeaders })
  ]);
  
  const [triggersData, eventsData] = await Promise.all([
    triggersResponse.json(),
    eventsResponse.json()
  ]);
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() + days);
  
  const upcomingTriggers = triggersData.data.filter(trigger => {
    const triggerDate = new Date(trigger.trigger_date);
    return triggerDate >= new Date() && triggerDate <= cutoffDate;
  });
  
  const upcomingEvents = eventsData.data.filter(event => {
    const eventDate = new Date(event.date);
    return eventDate >= new Date() && eventDate <= cutoffDate;
  });
  
  return {
    triggers: upcomingTriggers.sort((a, b) => new Date(a.trigger_date) - new Date(b.trigger_date)),
    events: upcomingEvents.sort((a, b) => new Date(a.date) - new Date(b.date))
  };
}

// Usage
const deadlines = await getUpcomingDeadlines(30);
console.log(\`Upcoming in 30 days: \${deadlines.triggers.length} triggers, \${deadlines.events.length} events\`);
\`\`\`

---

## Response Format

All endpoints return a consistent response format:

\`\`\`json
{
  "status": "success|error",
  "message": "Human readable message",
  "data": "Response data (array for lists, object for single items)",
  "count": "Number of items (for list endpoints)"
}
\`\`\`

## Error Handling

\`\`\`javascript
try {
  const response = await fetch('/api/v1/cases/123/triggers', { headers: authHeaders });
  
  if (!response.ok) {
    if (response.status === 401) {
      console.error('Authentication failed - check your token');
    } else if (response.status === 404) {
      console.error('Resource not found');
    } else {
      console.error(\`API error: \${response.status}\`);
    }
    return;
  }
  
  const data = await response.json();
  if (data.status === 'error') {
    console.error('API returned error:', data.message);
    return;
  }
  
  // Process successful response
  console.log('Data received:', data.data);
} catch (error) {
  console.error('Network error:', error.message);
}
\`\`\``,
      contact: {
        name: 'API Support',
        email: 'support@docketcalendar.com'
      }
    },
    servers: [
      {
        url: serverUrl,
        description: environment === 'production' ? 'Production Server' : 'Development Server'
      }
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT'
        }
      }
    }
  },
  // Only include the simplified API routes (exclude dashboard and calendar)
  apis: [
    './src/routes/auth.routes.js',
    './src/routes/case.routes.js', 
    './src/routes/trigger.routes.js',
    './src/routes/event.routes.js'
  ]
};

let swaggerDocs;
try {
  swaggerDocs = swaggerJsdoc(swaggerOptions);
} catch (error) {
  console.error('Error generating Swagger docs:', error);
  // Fallback to just showing the error
  swaggerDocs = {
    openapi: '3.0.0',
    info: {
      title: 'API Documentation Error',
      version: '1.0.0',
      description: `Error generating documentation: ${error.message}`
    },
    paths: {}
  };
}

// Custom CSS for better styling and hiding topbar
const customCss = `
  .swagger-ui .topbar { display: none }
  
  .swagger-ui .info {
    margin: 20px 0;
  }
  
  .swagger-ui .info .title {
    color: #3b4151;
    font-family: sans-serif;
  }
  
  .swagger-ui .info .description {
    margin: 15px 0;
    color: #3b4151;
  }
  
  .swagger-ui .info .description h2 {
    color: #3b4151;
    margin-top: 30px;
    margin-bottom: 15px;
    font-size: 1.5em;
  }
  
  .swagger-ui .info .description h3 {
    color: #3b4151;
    margin-top: 20px;
    margin-bottom: 10px;
    font-size: 1.3em;
  }
  
  /* Use Case Box Styling */
  .swagger-ui .info .description h3 {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px 20px;
    margin: 30px 0 15px 0;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    font-size: 1.2em;
    font-weight: 600;
    color: #495057;
    position: relative;
  }
  
  /* Add a small accent line to use case headers */
  .swagger-ui .info .description h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: #007bff;
    border-radius: 4px 0 0 4px;
  }
  
  /* Style code blocks with enhanced boxes */
  .swagger-ui .info .description pre {
    background: #ffffff;
    border: 1px solid #e1e1e8;
    border-radius: 8px;
    margin: 10px 0 35px 0;
    padding: 20px;
    box-shadow: 0 3px 12px rgba(0,0,0,0.08);
    overflow-x: auto;
    position: relative;
    border-left: 4px solid #28a745;
  }
  
  /* Enhanced section headers */
  .swagger-ui .info .description h2 {
    border-bottom: 3px solid #007bff;
    padding-bottom: 12px;
    margin-top: 40px;
    margin-bottom: 25px;
    font-weight: 700;
    color: #2c3e50;
  }
  
  /* Add some breathing room between sections */
  .swagger-ui .info .description hr {
    margin: 50px 0;
    border: none;
    border-top: 2px solid #e9ecef;
    opacity: 0.5;
  }
  
  .swagger-ui .info .description ol {
    margin: 10px 0;
    padding-left: 20px;
  }
  
  .swagger-ui .info .description li {
    margin-bottom: 8px;
    line-height: 1.5;
  }
  
  .swagger-ui .info .description code {
    background: #f7f7f7;
    border: 1px solid #e1e1e1;
    border-radius: 4px;
    padding: 2px 4px;
    font-family: monospace;
    font-size: 0.9em;
  }
  
  .swagger-ui .scheme-container {
    margin: 20px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #e9ecef;
  }
  
  /* Additional styling for floating boxes */
  .swagger-ui .info .description pre {
    overflow-x: auto;
    max-width: 100%;
  }
  
  /* Ensure proper spacing between sections */
  .swagger-ui .info .description hr {
    clear: both;
    margin: 40px 0;
    border: none;
    border-top: 2px solid #e9ecef;
  }
`;

// Swagger setup
const swaggerSetup = (app) => {
  try {
    // Serve Swagger UI with improved configuration
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs, {
      customCss,
      customSiteTitle: 'DocketCalendar API v2.0 - Simplified Documentation',
      customfavIcon: '/favicon.ico',
      swaggerOptions: {
        deepLinking: true,
        displayOperationId: false,
        defaultModelsExpandDepth: 1,
        defaultModelExpandDepth: 1,
        defaultModelRendering: 'example',
        displayRequestDuration: true,
        docExpansion: 'list',
        filter: false,
        showExtensions: true,
        showCommonExtensions: true,
        tryItOutEnabled: true
      }
    }));
  } catch (error) {
    console.error('Error setting up Swagger UI:', error);
    // Provide a fallback route
    app.get('/api-docs', (req, res) => {
      res.status(500).send(`
        <h1>API Documentation Error</h1>
        <p>There was an error loading the API documentation.</p>
        <p>Error: ${error.message}</p>
      `);
    });
  }
};

module.exports = swaggerSetup; 